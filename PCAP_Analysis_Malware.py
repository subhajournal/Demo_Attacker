#!/usr/bin/env python
# coding: utf-8

# ### Import Libraries

# In[1]:


from scapy.all import * 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns


# ### Reading Packet File

# In[2]:

dr="D:/Execution/"
pckt=rdpcap(dr+"New-capture.pcap")


# In[10]:


plt.figure(figsize=(45,5))
plt.title("Severity of Packet Transfer by Sniffing PCAP",fontsize=20)
plt.xlabel("Time->",fontsize=15)
plt.ylabel("Severity->",fontsize=15)
plt.grid()
pckt.plot(lambda x:len(x))
plt.savefig(dr+"Packet_Severity.png")


# In[ ]:


res,unans = sr( IP(dst = "38.113.165.110")/TCP(flags="S", dport=(1,1024)) )


# In[ ]:


send(IP(src="10.1.99.100", dst="10.1.99.2", ttl=128)/ICMP(type=0)/"HelloWorld") 


# In[29]:


h=sr1(IP(dst="38.113.165.110")/ICMP()) 


# #### Generation of Packet

# In[ ]:


packets=Ether()/IP(dst="38.113.165.110")/ICMP()


# In[41]:


wireshark(packets)


# ### Read Packet Data

# In[3]:


file=pd.read_csv(dr+"New-capture-file.csv")


# In[4]:


file.head()


# In[28]:


file_new=file['Protocol']
file_proto=file.groupby('Protocol').count()
file_proto_list=file_proto.columns.tolist()
file_proto_list


# In[29]:


proto=np.unique(np.array(file['Protocol']))
proto


# In[34]:


proto_count=file_proto['No.'].tolist()
proto_count

# ### Visualization for protocol count

# In[37]:


plt.figure(figsize=(15,6))
plt.title("Protocol Count of the Network ")
plt.grid()
plt.xlabel("Count->")
plt.ylabel("Protocol->")
plt.bar(proto,proto_count)
plt.savefig(dr+"Protocol Count.png")


# ### Histogram plot for checking High Severe Packet Transmission

# In[38]:


plt.figure(figsize=(15,6))
plt.title("High Severe Packet Transmission")
plt.grid()
plt.xlabel("Time->")
plt.ylabel("Severity->")
plt.hist(file['Time'])
plt.savefig(dr+"High_Severity.png")


# ### Count number of Transmission

# In[39]:


src=list(np.unique(np.array(file["Source"])))
print(src)
cnt=[]
for i in range(len(src)):
    cnt.append(np.array(file["Source"]).tolist().count(src[i]))
print(cnt)


# ### Check for 5 High Transmission of Packet

# In[53]:


cnts=np.sort(cnt)[::-1]
print(cnt)
print(cnts)
high5cnt=[]
high5=[]
for i in range(7):
    if cnt.index(cnts[i]) not in high5cnt:
        high5cnt.append(cnt.index(cnts[i]))
    if src[cnt.index(cnts[i])] not in high5:
        high5.append(src[cnt.index(cnts[i])])
print(high5)
print(high5cnt)
plt.figure(figsize=(15,10))
plt.title("High packet Transmission count",fontsize=15)
plt.xlabel("Address->",fontsize=12)
plt.ylabel("Transmission Count->",fontsize=12)
plt.bar(high5,cnts[:len(high5)],color="krgbr")
plt.savefig(dr+"Top_5_Transmission.png")


# ### Check for 5 Lowest Transmission of Packet

# In[55]:


cnts=np.sort(cnt)
print(cnt)
print(cnts)
low5cnt=[]
low5=[]
for i in range(30):
    if cnt.index(cnts[i]) not in low5cnt:
        low5cnt.append(cnt.index(cnts[i]))
    if src[cnt.index(cnts[i])] not in low5:
        low5.append(src[cnt.index(cnts[i])])
print("IP: ",low5)
print("Transaction Count: ",low5cnt)
plt.figure(figsize=(15,10))
plt.title("Low packet Transmission count",fontsize=15)
plt.xlabel("Address->",fontsize=12)
plt.ylabel("Transmission Count->",fontsize=12)
plt.bar(low5,low5cnt,color="cmyck")
plt.savefig(dr+"Low_5_Transmission.png")


# ### High Traffic Count

# In[58]:


plt.figure(figsize=(15,6))
plt.title("High Traffic Count")
plt.grid()
sns.countplot(file['Protocol'])
plt.savefig(dr+"High_Traffic_All.png")


# ### Check Information of tranmitted Packet

# In[59]:


inf=np.array(file["Info"])
print(inf[:3])


# ##### Filtering info:
# 
#     Seq=1, Ack=1
#     Seq=0, Ack=0
#     Seq=0
#     Seq>350
# 

# In[60]:


infolist=file["Info"].tolist()
filtered=[]
for i in range(len(infolist)):
    if 'Seq=1 Ack=1' in infolist[i]:
        filtered.append(infolist[i])
    if 'Seq=0 Ack=0' in infolist[i]:
        filtered.append(infolist[i])
    if 'Application Data' in infolist[i]:
        filtered.append(infolist[i])    
#print(filtered)
dataind=[]
for i in range(len(file["Info"])):
    if file["Info"][i] in filtered:
        dataind.append(i)
print(dataind)


# ### Filtering Data with High Sensisitive Port with Paacket Transmission

# In[61]:


filter_file=file.iloc[dataind]


# In[62]:


filter_file.head()


# ### Analysis of Sensitive Ports for Malware sensitivity

# In[65]:


plt.figure(figsize=(10,6))
plt.title("Protocols Carrying Malware Traffic")
plt.grid()
sns.countplot(filter_file["Protocol"])
plt.savefig("Malware_Traffic_Protocol.png")


# In[66]:


plt.figure(figsize=(15,10))
plt.title("Sorce involved in Malware Traffic",fontsize=20)
plt.grid()
ax=sns.countplot(y="Source", data=filter_file)
plt.savefig("Source_Malware_Traffic_Protocol.png")


# In[67]:


plt.figure(figsize=(15,10))
plt.title("Destination involved in Malware Traffic",fontsize=20)
plt.grid()
ax = sns.countplot(y="Destination", data=filter_file)
plt.savefig(dr+"Destination_Malware_Traffic_Protocol.png")


# In[38]:


plt.figure(figsize=(15,10))
plt.title("Source & Destination involved in Malware Traffic",fontsize=20)
plt.grid()
ax = sns.countplot(y="Source", hue="Destination", data=filter_file)
plt.savefig(dr+"Destination_Source__Malware_Traffic_Protocol.png")


# In[71]:


filter_file


# In[70]:


plt.figure(figsize=(15,7))
ax = sns.countplot(x="Destination", data=filter_file)
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}'.format(height/float(len(filter_file))),
            ha="center") 
ax.set(ylabel="Percent")

